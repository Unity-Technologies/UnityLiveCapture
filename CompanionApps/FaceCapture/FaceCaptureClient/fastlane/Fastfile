# Uncomment the line if you want fastlane to automatically update itself
#update_fastlane

default_platform(:ios)

app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
app_name = "#{app_identifier}"
slack_channel = "#facecapture-builds"
MY_DEV_PROFILE = "match Development #{app_identifier}"
# Unity
MY_TEAM = "BVPN9UFA9B"

platform :ios do
  lane :test do
    ver = "0.1"
    x = app_store_build_number(
      initial_build_number: 0,
      live: false,
      app_identifier: "#{app_identifier}",
      version: ver,
    )
    buildNum = x + 1
    message = "Test Message"
    notify_slack(buildNum, message)
  end

  desc "Create Local Dev Build"
  lane :local_build do |options|
    RELEASE_TYPE = UI.select("Select your project: ", ["development", "adhoc"])
    XCODE_PROJ = UI.input("Drag your Unity-iPhone.xcodeproj file to this window")
    begin
      #puts options[:release_type]
      buildNum = get_version_number(
        xcodeproj: "#{XCODE_PROJ}",
        target: "Unity-iPhone",
      )
      match(
        force_for_new_devices: true,
        type: "#{RELEASE_TYPE}",
        app_identifier: "#{app_identifier}",
        git_branch: "#{app_identifier}",
        readonly: true,
        generate_apple_certs: false,
        git_url: "git@github.com:Unity-Technologies/fastlane_certificates.git",
      )
      # automatic code signing for developers
      update_code_signing_settings(
        use_automatic_signing: false,
        path: "#{XCODE_PROJ}",
      )
      settings_to_override = {
        :BUNDLE_IDENTIFIER => "#{app_identifier}",
        :DEVELOPMENT_TEAM => MY_TEAM,
        :PROVISIONING_PROFILE_SPECIFIER => MY_DEV_PROFILE,
      }
      gym(
        project: "#{XCODE_PROJ}",
        scheme: "Unity-iPhone",
        skip_profile_detection: false,
        silent: false,
        configuration: "Release",
        clean: true,
        xcargs: settings_to_override,
        output_directory: "builds/",
        export_method: "#{RELEASE_TYPE}",
        #export_method: options[:release_type],
        export_options: {
          method: "#{RELEASE_TYPE}",
          provisioningProfiles: {
            "#{app_identifier}" => MY_DEV_PROFILE,
          },
        },
      )
      install_local
    rescue => ex
      # re-raise the exception unless it's something we're OK with ignoring
      UI.message(ex)
      raise ex unless ex.message.include?("Error message of interest")
    end
  end

  desc "Install on local device"
  lane :install_local do
    install_on_device(
      ipa: "builds/#{app_identifier}.ipa",
    )
  end

  desc "Update Build Number"
  lane :increment do
    ver = get_version_number(
      xcodeproj: "Unity-iPhone.xcodeproj",
      target: "Unity-iPhone",
    )

     uri = URI.parse("https://increment.build/IpC3sgrjVkymXHXCU89vaQ/get")
     response = Net::HTTP.get_response(uri)
    
     # We check whether the response is an integer because it is an external service
     # Technically, it should always be an integer
     if response.kind_of? Net::HTTPSuccess and is_integer?(response.body)
       increment_build_number(
        xcodeproj: "Unity-iPhone.xcodeproj",
        build_number: response.body,
       )
     else    
      raise "The incremented build number received from increment.build is not a number"
     end

     buildNum = get_build_number(
      xcodeproj: "Unity-iPhone.xcodeproj",
     )
     message = "Finished Unity Build, *Begin* XCode Build"
     notify_slack(buildNum, message)
  end

  desc "CloudBuild Upload beta build to TestFlight"
  lane :beta do
    begin
      buildNum = get_build_number(
        xcodeproj: "Unity-iPhone.xcodeproj",
      )

      # ENV VAR configured in CloudBuild Environment Variables Section
      groups = ENV["PILOT_GROUPS"].split(",")
      message = "Finished XCode Build, *Begin* Uploading to TestFlight"
      notify_slack(buildNum, message)
      upload_to_testflight(
        demo_account_required: false,
        reject_build_waiting_for_review: true,
        skip_waiting_for_build_processing: true,
        apple_id: "1544159771",
        groups: groups,
      )
      message = "Finished Uploading to TestFlight, *Begin* remainder CloudBuild steps"
      notify_slack(buildNum, message)
    rescue => ex
      # re-raise the exception unless it's something we're OK with ignoring
      UI.message(ex)
      raise ex unless ex.message.include?("Error message of interest")
      UI.important("upload_to_testflight options failed, but continuing anyway!")
    end
  end
end

def is_integer?(str)
    Integer(str) != nil rescue false
end

def notify_slack(buildNum, message)
  slack(
    message: message,
    success: true,
    slack_url: "https://hooks.slack.com/services/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",
    channel: "#facecapture-builds",
    attachment_properties: {
      fields: [
        {
          title: "Build number",
          value: buildNum,
        },
      ],
    },
  )
end

# error block is executed when a error occurs
error do |beta, exception|
  slack(
    slack_url: "https://hooks.slack.com/services/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",
    channel: "#{slack_channel}",
    # message with short human friendly message
    message: exception.to_s,
    success: false,
    # Output containing extended log output
    payload: { "Output" => exception.error_info.to_s },
  )
end
