using System;
using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace Unity.LiveCapture.Editor
{
    /// <summary>
    /// Generates a file containing the package information.
    /// </summary>
    class LiveCaptureInfoGenerator : AssetPostprocessor
    {
        /// <summary>
        /// The file that when modified/imported will trigger file generation.
        /// </summary>
        static readonly string k_TriggerFile = $"com.unity.live-capture/package.json";

        [Serializable]
        class PackageInfo
        {
            public string name;
            public string displayName;
            public string version;
        }

        static void OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromAssetPaths)
        {
            foreach (var asset in importedAssets)
            {
                if (asset.EndsWith(k_TriggerFile))
                {
                    var sourceFile = new FileInfo(asset);
                    var text = File.ReadAllText(sourceFile.FullName);
                    var info = JsonUtility.FromJson<PackageInfo>(text);
                    var outputDir = Path.Combine(sourceFile.Directory.FullName, "Runtime/Core");
                    Generate(info, outputDir);
                }
            }
        }

        static void Generate(PackageInfo info, string outputDirectory)
        {
            var version = PackageUtility.GetVersion(info.version);

            var str = $@"// <auto-generated>
// This file is generated by {nameof(LiveCaptureInfoGenerator)}, do not modify manually
namespace {typeof(LiveCaptureSettings).Namespace}
{{
    class LiveCaptureInfo
    {{
        /// <summary>
        /// The name of the package.
        /// </summary>
        public const string Name = ""{info.name}"";

        /// <summary>
        /// The display name of the package.
        /// </summary>
        public const string DisplayName = ""{info.displayName}"";

        /// <summary>
        /// The version of the package.
        /// </summary>
        public const string Version = ""{info.version}"";

        /// <summary>
        /// The version used for documentation references.
        /// </summary>
        public const string DocsVersion = ""{version.Major}.{version.Minor}"";
    }}
}}
";

            // change to Unix line endings to avoid warning in Unity
            var generatedContents = str.Replace("\r\n", "\n");

            var fileName = $"LiveCaptureInfo.cs";
            var filePath = Path.Combine(outputDirectory, fileName);

            // only write the file if anything has changed to avoid triggering file watchers
            if (File.Exists(filePath) && File.ReadAllText(filePath) == generatedContents)
                return;

            if (!Directory.Exists(outputDirectory))
                Directory.CreateDirectory(outputDirectory);

            File.WriteAllText(filePath, generatedContents, Encoding.UTF8);
        }
    }
}
