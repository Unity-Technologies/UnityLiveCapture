// <auto-generated>
// This file is generated by FaceBlendShapeGenerator, do not modify manually
using System;
using UnityEngine;

namespace Unity.LiveCapture.ARKitFaceCapture
{
    partial struct FaceBlendShapePose
    {
        /// <summary>
        /// The number of supported blend shapes.
        /// </summary>
        public const int ShapeCount = 52;

        /// <inheritdoc cref="FaceBlendShape.BrowDownLeft"/>
        [Range(0f, 1f)] public float BrowDownLeft;
        /// <inheritdoc cref="FaceBlendShape.BrowDownRight"/>
        [Range(0f, 1f)] public float BrowDownRight;
        /// <inheritdoc cref="FaceBlendShape.BrowInnerUp"/>
        [Range(0f, 1f)] public float BrowInnerUp;
        /// <inheritdoc cref="FaceBlendShape.BrowOuterUpLeft"/>
        [Range(0f, 1f)] public float BrowOuterUpLeft;
        /// <inheritdoc cref="FaceBlendShape.BrowOuterUpRight"/>
        [Range(0f, 1f)] public float BrowOuterUpRight;
        /// <inheritdoc cref="FaceBlendShape.CheekPuff"/>
        [Range(0f, 1f)] public float CheekPuff;
        /// <inheritdoc cref="FaceBlendShape.CheekSquintLeft"/>
        [Range(0f, 1f)] public float CheekSquintLeft;
        /// <inheritdoc cref="FaceBlendShape.CheekSquintRight"/>
        [Range(0f, 1f)] public float CheekSquintRight;
        /// <inheritdoc cref="FaceBlendShape.EyeBlinkLeft"/>
        [Range(0f, 1f)] public float EyeBlinkLeft;
        /// <inheritdoc cref="FaceBlendShape.EyeBlinkRight"/>
        [Range(0f, 1f)] public float EyeBlinkRight;
        /// <inheritdoc cref="FaceBlendShape.EyeLookDownLeft"/>
        [Range(0f, 1f)] public float EyeLookDownLeft;
        /// <inheritdoc cref="FaceBlendShape.EyeLookDownRight"/>
        [Range(0f, 1f)] public float EyeLookDownRight;
        /// <inheritdoc cref="FaceBlendShape.EyeLookInLeft"/>
        [Range(0f, 1f)] public float EyeLookInLeft;
        /// <inheritdoc cref="FaceBlendShape.EyeLookInRight"/>
        [Range(0f, 1f)] public float EyeLookInRight;
        /// <inheritdoc cref="FaceBlendShape.EyeLookOutLeft"/>
        [Range(0f, 1f)] public float EyeLookOutLeft;
        /// <inheritdoc cref="FaceBlendShape.EyeLookOutRight"/>
        [Range(0f, 1f)] public float EyeLookOutRight;
        /// <inheritdoc cref="FaceBlendShape.EyeLookUpLeft"/>
        [Range(0f, 1f)] public float EyeLookUpLeft;
        /// <inheritdoc cref="FaceBlendShape.EyeLookUpRight"/>
        [Range(0f, 1f)] public float EyeLookUpRight;
        /// <inheritdoc cref="FaceBlendShape.EyeSquintLeft"/>
        [Range(0f, 1f)] public float EyeSquintLeft;
        /// <inheritdoc cref="FaceBlendShape.EyeSquintRight"/>
        [Range(0f, 1f)] public float EyeSquintRight;
        /// <inheritdoc cref="FaceBlendShape.EyeWideLeft"/>
        [Range(0f, 1f)] public float EyeWideLeft;
        /// <inheritdoc cref="FaceBlendShape.EyeWideRight"/>
        [Range(0f, 1f)] public float EyeWideRight;
        /// <inheritdoc cref="FaceBlendShape.JawForward"/>
        [Range(0f, 1f)] public float JawForward;
        /// <inheritdoc cref="FaceBlendShape.JawLeft"/>
        [Range(0f, 1f)] public float JawLeft;
        /// <inheritdoc cref="FaceBlendShape.JawOpen"/>
        [Range(0f, 1f)] public float JawOpen;
        /// <inheritdoc cref="FaceBlendShape.JawRight"/>
        [Range(0f, 1f)] public float JawRight;
        /// <inheritdoc cref="FaceBlendShape.MouthClose"/>
        [Range(0f, 1f)] public float MouthClose;
        /// <inheritdoc cref="FaceBlendShape.MouthDimpleLeft"/>
        [Range(0f, 1f)] public float MouthDimpleLeft;
        /// <inheritdoc cref="FaceBlendShape.MouthDimpleRight"/>
        [Range(0f, 1f)] public float MouthDimpleRight;
        /// <inheritdoc cref="FaceBlendShape.MouthFrownLeft"/>
        [Range(0f, 1f)] public float MouthFrownLeft;
        /// <inheritdoc cref="FaceBlendShape.MouthFrownRight"/>
        [Range(0f, 1f)] public float MouthFrownRight;
        /// <inheritdoc cref="FaceBlendShape.MouthFunnel"/>
        [Range(0f, 1f)] public float MouthFunnel;
        /// <inheritdoc cref="FaceBlendShape.MouthLeft"/>
        [Range(0f, 1f)] public float MouthLeft;
        /// <inheritdoc cref="FaceBlendShape.MouthLowerDownLeft"/>
        [Range(0f, 1f)] public float MouthLowerDownLeft;
        /// <inheritdoc cref="FaceBlendShape.MouthLowerDownRight"/>
        [Range(0f, 1f)] public float MouthLowerDownRight;
        /// <inheritdoc cref="FaceBlendShape.MouthPressLeft"/>
        [Range(0f, 1f)] public float MouthPressLeft;
        /// <inheritdoc cref="FaceBlendShape.MouthPressRight"/>
        [Range(0f, 1f)] public float MouthPressRight;
        /// <inheritdoc cref="FaceBlendShape.MouthPucker"/>
        [Range(0f, 1f)] public float MouthPucker;
        /// <inheritdoc cref="FaceBlendShape.MouthRight"/>
        [Range(0f, 1f)] public float MouthRight;
        /// <inheritdoc cref="FaceBlendShape.MouthRollLower"/>
        [Range(0f, 1f)] public float MouthRollLower;
        /// <inheritdoc cref="FaceBlendShape.MouthRollUpper"/>
        [Range(0f, 1f)] public float MouthRollUpper;
        /// <inheritdoc cref="FaceBlendShape.MouthShrugLower"/>
        [Range(0f, 1f)] public float MouthShrugLower;
        /// <inheritdoc cref="FaceBlendShape.MouthShrugUpper"/>
        [Range(0f, 1f)] public float MouthShrugUpper;
        /// <inheritdoc cref="FaceBlendShape.MouthSmileLeft"/>
        [Range(0f, 1f)] public float MouthSmileLeft;
        /// <inheritdoc cref="FaceBlendShape.MouthSmileRight"/>
        [Range(0f, 1f)] public float MouthSmileRight;
        /// <inheritdoc cref="FaceBlendShape.MouthStretchLeft"/>
        [Range(0f, 1f)] public float MouthStretchLeft;
        /// <inheritdoc cref="FaceBlendShape.MouthStretchRight"/>
        [Range(0f, 1f)] public float MouthStretchRight;
        /// <inheritdoc cref="FaceBlendShape.MouthUpperUpLeft"/>
        [Range(0f, 1f)] public float MouthUpperUpLeft;
        /// <inheritdoc cref="FaceBlendShape.MouthUpperUpRight"/>
        [Range(0f, 1f)] public float MouthUpperUpRight;
        /// <inheritdoc cref="FaceBlendShape.NoseSneerLeft"/>
        [Range(0f, 1f)] public float NoseSneerLeft;
        /// <inheritdoc cref="FaceBlendShape.NoseSneerRight"/>
        [Range(0f, 1f)] public float NoseSneerRight;
        /// <inheritdoc cref="FaceBlendShape.TongueOut"/>
        [Range(0f, 1f)] public float TongueOut;

        float GetValue(int index)
        {
            switch (index)
            {
                case 0: return BrowDownLeft;
                case 1: return BrowDownRight;
                case 2: return BrowInnerUp;
                case 3: return BrowOuterUpLeft;
                case 4: return BrowOuterUpRight;
                case 5: return CheekPuff;
                case 6: return CheekSquintLeft;
                case 7: return CheekSquintRight;
                case 8: return EyeBlinkLeft;
                case 9: return EyeBlinkRight;
                case 10: return EyeLookDownLeft;
                case 11: return EyeLookDownRight;
                case 12: return EyeLookInLeft;
                case 13: return EyeLookInRight;
                case 14: return EyeLookOutLeft;
                case 15: return EyeLookOutRight;
                case 16: return EyeLookUpLeft;
                case 17: return EyeLookUpRight;
                case 18: return EyeSquintLeft;
                case 19: return EyeSquintRight;
                case 20: return EyeWideLeft;
                case 21: return EyeWideRight;
                case 22: return JawForward;
                case 23: return JawLeft;
                case 24: return JawOpen;
                case 25: return JawRight;
                case 26: return MouthClose;
                case 27: return MouthDimpleLeft;
                case 28: return MouthDimpleRight;
                case 29: return MouthFrownLeft;
                case 30: return MouthFrownRight;
                case 31: return MouthFunnel;
                case 32: return MouthLeft;
                case 33: return MouthLowerDownLeft;
                case 34: return MouthLowerDownRight;
                case 35: return MouthPressLeft;
                case 36: return MouthPressRight;
                case 37: return MouthPucker;
                case 38: return MouthRight;
                case 39: return MouthRollLower;
                case 40: return MouthRollUpper;
                case 41: return MouthShrugLower;
                case 42: return MouthShrugUpper;
                case 43: return MouthSmileLeft;
                case 44: return MouthSmileRight;
                case 45: return MouthStretchLeft;
                case 46: return MouthStretchRight;
                case 47: return MouthUpperUpLeft;
                case 48: return MouthUpperUpRight;
                case 49: return NoseSneerLeft;
                case 50: return NoseSneerRight;
                case 51: return TongueOut;
            }
            throw new IndexOutOfRangeException($"Blend shape index {index} out of valid range [0, {ShapeCount}].");
        }

        void SetValue(int index, float value)
        {
            switch (index)
            {
                case 0: BrowDownLeft = value; return;
                case 1: BrowDownRight = value; return;
                case 2: BrowInnerUp = value; return;
                case 3: BrowOuterUpLeft = value; return;
                case 4: BrowOuterUpRight = value; return;
                case 5: CheekPuff = value; return;
                case 6: CheekSquintLeft = value; return;
                case 7: CheekSquintRight = value; return;
                case 8: EyeBlinkLeft = value; return;
                case 9: EyeBlinkRight = value; return;
                case 10: EyeLookDownLeft = value; return;
                case 11: EyeLookDownRight = value; return;
                case 12: EyeLookInLeft = value; return;
                case 13: EyeLookInRight = value; return;
                case 14: EyeLookOutLeft = value; return;
                case 15: EyeLookOutRight = value; return;
                case 16: EyeLookUpLeft = value; return;
                case 17: EyeLookUpRight = value; return;
                case 18: EyeSquintLeft = value; return;
                case 19: EyeSquintRight = value; return;
                case 20: EyeWideLeft = value; return;
                case 21: EyeWideRight = value; return;
                case 22: JawForward = value; return;
                case 23: JawLeft = value; return;
                case 24: JawOpen = value; return;
                case 25: JawRight = value; return;
                case 26: MouthClose = value; return;
                case 27: MouthDimpleLeft = value; return;
                case 28: MouthDimpleRight = value; return;
                case 29: MouthFrownLeft = value; return;
                case 30: MouthFrownRight = value; return;
                case 31: MouthFunnel = value; return;
                case 32: MouthLeft = value; return;
                case 33: MouthLowerDownLeft = value; return;
                case 34: MouthLowerDownRight = value; return;
                case 35: MouthPressLeft = value; return;
                case 36: MouthPressRight = value; return;
                case 37: MouthPucker = value; return;
                case 38: MouthRight = value; return;
                case 39: MouthRollLower = value; return;
                case 40: MouthRollUpper = value; return;
                case 41: MouthShrugLower = value; return;
                case 42: MouthShrugUpper = value; return;
                case 43: MouthSmileLeft = value; return;
                case 44: MouthSmileRight = value; return;
                case 45: MouthStretchLeft = value; return;
                case 46: MouthStretchRight = value; return;
                case 47: MouthUpperUpLeft = value; return;
                case 48: MouthUpperUpRight = value; return;
                case 49: NoseSneerLeft = value; return;
                case 50: NoseSneerRight = value; return;
                case 51: TongueOut = value; return;
            }
            throw new IndexOutOfRangeException($"Blend shape index {index} out of valid range [0, {ShapeCount}].");
        }

        /// <summary>
        /// Horizontally mirrors the face pose.
        /// </summary>
        /// <remarks>
        /// ARKit's default blend shapes are set so that 'right' indicates the right side of the face when viewing from the front.
        /// </remarks>
        public void FlipHorizontally()
        {
            var tempBrowDownLeft = BrowDownLeft;
            var tempBrowDownRight = BrowDownRight;
            var tempBrowOuterUpLeft = BrowOuterUpLeft;
            var tempBrowOuterUpRight = BrowOuterUpRight;
            var tempCheekSquintLeft = CheekSquintLeft;
            var tempCheekSquintRight = CheekSquintRight;
            var tempEyeBlinkLeft = EyeBlinkLeft;
            var tempEyeBlinkRight = EyeBlinkRight;
            var tempEyeLookDownLeft = EyeLookDownLeft;
            var tempEyeLookDownRight = EyeLookDownRight;
            var tempEyeLookInLeft = EyeLookInLeft;
            var tempEyeLookInRight = EyeLookInRight;
            var tempEyeLookOutLeft = EyeLookOutLeft;
            var tempEyeLookOutRight = EyeLookOutRight;
            var tempEyeLookUpLeft = EyeLookUpLeft;
            var tempEyeLookUpRight = EyeLookUpRight;
            var tempEyeSquintLeft = EyeSquintLeft;
            var tempEyeSquintRight = EyeSquintRight;
            var tempEyeWideLeft = EyeWideLeft;
            var tempEyeWideRight = EyeWideRight;
            var tempJawLeft = JawLeft;
            var tempJawRight = JawRight;
            var tempMouthDimpleLeft = MouthDimpleLeft;
            var tempMouthDimpleRight = MouthDimpleRight;
            var tempMouthFrownLeft = MouthFrownLeft;
            var tempMouthFrownRight = MouthFrownRight;
            var tempMouthLeft = MouthLeft;
            var tempMouthLowerDownLeft = MouthLowerDownLeft;
            var tempMouthLowerDownRight = MouthLowerDownRight;
            var tempMouthPressLeft = MouthPressLeft;
            var tempMouthPressRight = MouthPressRight;
            var tempMouthRight = MouthRight;
            var tempMouthSmileLeft = MouthSmileLeft;
            var tempMouthSmileRight = MouthSmileRight;
            var tempMouthStretchLeft = MouthStretchLeft;
            var tempMouthStretchRight = MouthStretchRight;
            var tempMouthUpperUpLeft = MouthUpperUpLeft;
            var tempMouthUpperUpRight = MouthUpperUpRight;
            var tempNoseSneerLeft = NoseSneerLeft;
            var tempNoseSneerRight = NoseSneerRight;
            BrowDownLeft = tempBrowDownRight;
            BrowDownRight = tempBrowDownLeft;
            BrowOuterUpLeft = tempBrowOuterUpRight;
            BrowOuterUpRight = tempBrowOuterUpLeft;
            CheekSquintLeft = tempCheekSquintRight;
            CheekSquintRight = tempCheekSquintLeft;
            EyeBlinkLeft = tempEyeBlinkRight;
            EyeBlinkRight = tempEyeBlinkLeft;
            EyeLookDownLeft = tempEyeLookDownRight;
            EyeLookDownRight = tempEyeLookDownLeft;
            EyeLookInLeft = tempEyeLookInRight;
            EyeLookInRight = tempEyeLookInLeft;
            EyeLookOutLeft = tempEyeLookOutRight;
            EyeLookOutRight = tempEyeLookOutLeft;
            EyeLookUpLeft = tempEyeLookUpRight;
            EyeLookUpRight = tempEyeLookUpLeft;
            EyeSquintLeft = tempEyeSquintRight;
            EyeSquintRight = tempEyeSquintLeft;
            EyeWideLeft = tempEyeWideRight;
            EyeWideRight = tempEyeWideLeft;
            JawLeft = tempJawRight;
            JawRight = tempJawLeft;
            MouthDimpleLeft = tempMouthDimpleRight;
            MouthDimpleRight = tempMouthDimpleLeft;
            MouthFrownLeft = tempMouthFrownRight;
            MouthFrownRight = tempMouthFrownLeft;
            MouthLeft = tempMouthRight;
            MouthLowerDownLeft = tempMouthLowerDownRight;
            MouthLowerDownRight = tempMouthLowerDownLeft;
            MouthPressLeft = tempMouthPressRight;
            MouthPressRight = tempMouthPressLeft;
            MouthRight = tempMouthLeft;
            MouthSmileLeft = tempMouthSmileRight;
            MouthSmileRight = tempMouthSmileLeft;
            MouthStretchLeft = tempMouthStretchRight;
            MouthStretchRight = tempMouthStretchLeft;
            MouthUpperUpLeft = tempMouthUpperUpRight;
            MouthUpperUpRight = tempMouthUpperUpLeft;
            NoseSneerLeft = tempNoseSneerRight;
            NoseSneerRight = tempNoseSneerLeft;
        }

        /// <summary>
        /// Linearly interpolates between <paramref name="a"/> and <paramref name="b"/> by factor <paramref name="t"/>.
        /// </summary>
        /// <remarks><br/>
        /// * When <paramref name="t"/> is 0 <paramref name="result"/> is set to <paramref name="a"/>.
        /// * When <paramref name="t"/> is 1 <paramref name="result"/> is set to  <paramref name="b"/>.
        /// * When <paramref name="t"/> is 0.5 <paramref name="result"/> is set to the midpoint of <paramref name="a"/> and <paramref name="b"/>.
        /// </remarks>
        /// <param name="a">The pose to interpolate from.</param>
        /// <param name="b">To pose to interpolate to.</param>
        /// <param name="t">The interpolation factor.</param>
        /// <param name="result">The interpolated pose.</param>
        public static void LerpUnclamped(in FaceBlendShapePose a, in FaceBlendShapePose b, float t, out FaceBlendShapePose result)
        {
            result.BrowDownLeft = Mathf.LerpUnclamped(a.BrowDownLeft, b.BrowDownLeft, t);
            result.BrowDownRight = Mathf.LerpUnclamped(a.BrowDownRight, b.BrowDownRight, t);
            result.BrowInnerUp = Mathf.LerpUnclamped(a.BrowInnerUp, b.BrowInnerUp, t);
            result.BrowOuterUpLeft = Mathf.LerpUnclamped(a.BrowOuterUpLeft, b.BrowOuterUpLeft, t);
            result.BrowOuterUpRight = Mathf.LerpUnclamped(a.BrowOuterUpRight, b.BrowOuterUpRight, t);
            result.CheekPuff = Mathf.LerpUnclamped(a.CheekPuff, b.CheekPuff, t);
            result.CheekSquintLeft = Mathf.LerpUnclamped(a.CheekSquintLeft, b.CheekSquintLeft, t);
            result.CheekSquintRight = Mathf.LerpUnclamped(a.CheekSquintRight, b.CheekSquintRight, t);
            result.EyeBlinkLeft = Mathf.LerpUnclamped(a.EyeBlinkLeft, b.EyeBlinkLeft, t);
            result.EyeBlinkRight = Mathf.LerpUnclamped(a.EyeBlinkRight, b.EyeBlinkRight, t);
            result.EyeLookDownLeft = Mathf.LerpUnclamped(a.EyeLookDownLeft, b.EyeLookDownLeft, t);
            result.EyeLookDownRight = Mathf.LerpUnclamped(a.EyeLookDownRight, b.EyeLookDownRight, t);
            result.EyeLookInLeft = Mathf.LerpUnclamped(a.EyeLookInLeft, b.EyeLookInLeft, t);
            result.EyeLookInRight = Mathf.LerpUnclamped(a.EyeLookInRight, b.EyeLookInRight, t);
            result.EyeLookOutLeft = Mathf.LerpUnclamped(a.EyeLookOutLeft, b.EyeLookOutLeft, t);
            result.EyeLookOutRight = Mathf.LerpUnclamped(a.EyeLookOutRight, b.EyeLookOutRight, t);
            result.EyeLookUpLeft = Mathf.LerpUnclamped(a.EyeLookUpLeft, b.EyeLookUpLeft, t);
            result.EyeLookUpRight = Mathf.LerpUnclamped(a.EyeLookUpRight, b.EyeLookUpRight, t);
            result.EyeSquintLeft = Mathf.LerpUnclamped(a.EyeSquintLeft, b.EyeSquintLeft, t);
            result.EyeSquintRight = Mathf.LerpUnclamped(a.EyeSquintRight, b.EyeSquintRight, t);
            result.EyeWideLeft = Mathf.LerpUnclamped(a.EyeWideLeft, b.EyeWideLeft, t);
            result.EyeWideRight = Mathf.LerpUnclamped(a.EyeWideRight, b.EyeWideRight, t);
            result.JawForward = Mathf.LerpUnclamped(a.JawForward, b.JawForward, t);
            result.JawLeft = Mathf.LerpUnclamped(a.JawLeft, b.JawLeft, t);
            result.JawOpen = Mathf.LerpUnclamped(a.JawOpen, b.JawOpen, t);
            result.JawRight = Mathf.LerpUnclamped(a.JawRight, b.JawRight, t);
            result.MouthClose = Mathf.LerpUnclamped(a.MouthClose, b.MouthClose, t);
            result.MouthDimpleLeft = Mathf.LerpUnclamped(a.MouthDimpleLeft, b.MouthDimpleLeft, t);
            result.MouthDimpleRight = Mathf.LerpUnclamped(a.MouthDimpleRight, b.MouthDimpleRight, t);
            result.MouthFrownLeft = Mathf.LerpUnclamped(a.MouthFrownLeft, b.MouthFrownLeft, t);
            result.MouthFrownRight = Mathf.LerpUnclamped(a.MouthFrownRight, b.MouthFrownRight, t);
            result.MouthFunnel = Mathf.LerpUnclamped(a.MouthFunnel, b.MouthFunnel, t);
            result.MouthLeft = Mathf.LerpUnclamped(a.MouthLeft, b.MouthLeft, t);
            result.MouthLowerDownLeft = Mathf.LerpUnclamped(a.MouthLowerDownLeft, b.MouthLowerDownLeft, t);
            result.MouthLowerDownRight = Mathf.LerpUnclamped(a.MouthLowerDownRight, b.MouthLowerDownRight, t);
            result.MouthPressLeft = Mathf.LerpUnclamped(a.MouthPressLeft, b.MouthPressLeft, t);
            result.MouthPressRight = Mathf.LerpUnclamped(a.MouthPressRight, b.MouthPressRight, t);
            result.MouthPucker = Mathf.LerpUnclamped(a.MouthPucker, b.MouthPucker, t);
            result.MouthRight = Mathf.LerpUnclamped(a.MouthRight, b.MouthRight, t);
            result.MouthRollLower = Mathf.LerpUnclamped(a.MouthRollLower, b.MouthRollLower, t);
            result.MouthRollUpper = Mathf.LerpUnclamped(a.MouthRollUpper, b.MouthRollUpper, t);
            result.MouthShrugLower = Mathf.LerpUnclamped(a.MouthShrugLower, b.MouthShrugLower, t);
            result.MouthShrugUpper = Mathf.LerpUnclamped(a.MouthShrugUpper, b.MouthShrugUpper, t);
            result.MouthSmileLeft = Mathf.LerpUnclamped(a.MouthSmileLeft, b.MouthSmileLeft, t);
            result.MouthSmileRight = Mathf.LerpUnclamped(a.MouthSmileRight, b.MouthSmileRight, t);
            result.MouthStretchLeft = Mathf.LerpUnclamped(a.MouthStretchLeft, b.MouthStretchLeft, t);
            result.MouthStretchRight = Mathf.LerpUnclamped(a.MouthStretchRight, b.MouthStretchRight, t);
            result.MouthUpperUpLeft = Mathf.LerpUnclamped(a.MouthUpperUpLeft, b.MouthUpperUpLeft, t);
            result.MouthUpperUpRight = Mathf.LerpUnclamped(a.MouthUpperUpRight, b.MouthUpperUpRight, t);
            result.NoseSneerLeft = Mathf.LerpUnclamped(a.NoseSneerLeft, b.NoseSneerLeft, t);
            result.NoseSneerRight = Mathf.LerpUnclamped(a.NoseSneerRight, b.NoseSneerRight, t);
            result.TongueOut = Mathf.LerpUnclamped(a.TongueOut, b.TongueOut, t);
        }
    }
}
